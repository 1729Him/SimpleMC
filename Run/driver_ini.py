#!/usr/bin/env python

import sys
sys.path = ["Analizers"] + sys.path

from RunBase import ParseModel, ParseDataset
from MCMCAnalyzer import MCMCAnalyzer
from MaxLikeAnalyzer import MaxLikeAnalyzer

import time
from initializer import *

"""
    This little code allows running something
    based on command line. To be used in conjuction with
    the wqdriver that subtmis to BNL queue. 
"""

def likeli(values):
    """
        If the sampler used isn't the MCMC of MCMCAnalyzer
        then, we need to set other types of likelihoods and
        priors objects. This method allows that. Therefore, it is a 
        likelihood defined for an external samplers and it is used 
        as parameter of the sampler run function. 

        Parameters:

        values:     implicit values, they are generated by the sampler.

        Variables: 

        listPars:    is the list with Parameter objects, above definied.
        T,L          T,L = TLinit(model, datasets)
    """
    listPars = instantiatePars(T,values)
    T.updateParams(listPars)
    L.setTheory(T)
    if (L.name()=="Composite"):
        cloglikes=L.compositeLogLikes_wprior()
        loglike=cloglikes.sum()
    else:
        loglike = L.loglike_wprior()
    return loglike

def priorTransform(theta):
    """
        Prior transform maps the values of the samping method theta to values between 0 and 1.
        
        Parameter:

        theta:  it is the hypervolume definied by the priors
    """
    return priorsTransform(theta,bounds, priortype)

if (len(sys.argv) != 2):
    print("Syntax error! Example: Run/driver.py fileConfig.ini")
    sys.exit("Good bye. Try again.")

inifile = sys.argv[1]

settings = iniReader(inifile)

chainsdir = settings[0]
model = settings[1]
prefact = settings[2]
datasets = settings[3]
samplername = settings[4]
plottername = settings[5]
      
T, L = TLinit(model,datasets)
#if you like to change the bounds, you need edit ParamDefs.py file.
bounds,means,nsigma = priorValues(T, L)
dims, paramsList = getDims(T)
n_sigma = dims*nsigma

if prefact == "pre":
    T.setVaryPrefactor()
    T.printFreeParameters() 
  
if samplername == 'mh':  
    nsamp = settings[6]
    skip = settings[7]
    temp = 1.0 ## temperature at which to sample, weights get readjusted on the fly
    chainno = 1
    weights = None
    outputname = model + "_" + prefact + "_" + datasets + "_" + samplername + "_" + str(nsamp)
  
    ti = time.time()
    
    M = MCMCAnalyzer(L, chainsdir + "/" + outputname,\
		skip=skip,nsamp=nsamp, temp=temp, chain_num=chainno)
	
    ttime = time.time() - ti
    
    try:
        from MCEvidence import MCEvidence 
        print("Aproximating bayesian evidence with MCEvidence (arXiv:1704.03472)\n")
        MLE = MCEvidence(chainsdir + "/" + outputname).evidence()
        writteSummary(chainsdir, outputname, ttime, MLE)

    except:
        writteSummary(chainsdir, outputname, ttime)
        print("Warning! MCEvidence could not calculate the approximation of the Bayesian evidence\n")
           
elif samplername in ['snest', 'mnest', 'bambi', 'sbambi']:
    from NestleConection import *
    nlivepoints = settings[6]
    accuracy = settings[7]
    priortype = settings[8]

    if samplername in ['mnest','snest']:
        from nestle import sample
        if samplername == 'mnest': method='multi'
        elif samplername == 'snest': method='single'
        ti = time.time()                  
        
        M = sample(likeli, priorTransform, ndim=dims, method=method,
            npoints=nlivepoints, dlogz=accuracy, callback=nestle.print_progress)             
        
        ttime = time.time() - ti
                
    elif samplername in ['bambi', 'sbambi']:   
        from bambi import run_pyBAMBI
        ti = time.time()
        if samplername == 'bambi': method = 'mnest'
        elif samplername == 'sbambi': method = 'snest'

        M = run_pyBAMBI(likeli, priorTransform, dims,\
            sampler = method, eff = accuracy,\
            nlive = nlivepoints, learner = 'keras')
    	
        ttime = time.time()- ti

    outNestle = printNestle(M, dims, paramsList)
    outputname = model + '_' + prefact + '_' + datasets + '_' + samplername + '_' + str(accuracy)  
    saveChainNestle(M,chainsdir + '/' + outputname)
    paramFiles(T, L, chainsdir + '/'+ outputname)
    writteSummary(chainsdir, outputname, ttime, 'Summary:',\
                    M.summary(), 'Parameter estimation', outNestle)
    
    weights = M.weights            

elif samplername == 'MaxLike':
    outputname = model + '_' + datasets + samplername 
    print("Using MaxLikeAnalyzer")
    ti = time.time()
    T, L = TLinit(model,datasets)
    T.printFreeParameters()
    A = MaxLikeAnalyzer(L)
    ttime = time.time()-ti
    writteSummary(chainsdir, outputname, ttime)
    T.printParameters(A.params)
else: 
    sys.exit("Exit. Unknown sampler name.")   

if plottername != "None":
    import Plotter
    p = Plotter.Plotter(outputname, chainsdir, samplername,\
         dims, means, weights = weights, plottername = plottername)     