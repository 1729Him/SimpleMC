[custom]
chainsdir = chains

;set model
;model options: LCDM, LCDMasslessnu, nuLCDM, NeffLCDM, noradLCDM, nuoLCDM,
;nuwLCDM, oLCDM, wCDM, waCDM, owCDM, owaCDM, JordiCDM, WeirdCDM, TLight, StepCDM,
;Spline, PolyCDM, fPolyCDM, Decay, Decay01, Decay05, EarlyDE, EarlyDE_rd_DE, SlowRDE, nled, generic
model = waCDM

;prefact options : [pre, phy]
prefact = phy

;set datasets used. Ex: UnionSN+BBAO+Planck
;data options: HD, BBAO, GBAO, GBAO_no6dF, CMASS, LBAO, LaBAO,
;LxBAO, MGS, Planck, WMAP, PlRd, WRd, PlDa, PlRdx10, CMBW, SN, SNx10, UnionSN,
;RiessH0, 6dFGS, generic
datasets = BBAO+HD
;sampler can be {mcmc, nested, emcee}
;or analyzers {MaxLikeAnalyzer, genetic}
;
;mcmc -> metropolis-hastings
;nested
    ;engine can be {nestle, dynesty}
    ;nestedType can be
        ;none -> Prior mass without bounds
        ;single -> Ellipsoidal nested sampling
        ;multi -> multinest
        ;balls ->  balls centered on each live point
        ;cube -> cubes centered on each live point
;Emcee
;MaxLike -> Maximum Likelihood Analyzer
;Genetetic
sampler = emcee

[mcmc]
nsamp   = 100000
skip    = 100
temp    = 2

;if single cpu, otherwise use mpi -np #
chainno = 1

;add derived parameters (True/False) ,
;i.e. Omega_Lambda, H0, Age of the Universe
addderived = False


[nested]
;engine can be nestle or dynesty
engine = dynesty

;dynamic option is only for dynesty engine
;dynamic and neuralNetwork can be yes/no
dynamic = no
neuralNetwork = no

;type: for dynesty -> {'single','multi', 'balls', 'cubes'}
;type for nestle -> {'single', 'multi'}
nestedType = multi

;it is recommended around nlivepoints=50*ndim, recommended 1024
nlivepoints = 100


;recommended 0.5
accuracy = 0.5

;u for flat(uniform) or g for gaussian prior
priortype = u

;nproc = mp.cpu_count()//2 by default, you can set with another positive integer
nproc = 0

;if neuralNetwork = yes, then you can set:

[neural]
split = 0.8

;numNeurons of hidden layer
numNeurons = 50

[emcee]
ensambles = 20
burnin = 50
samples = 50

[MaxLikeAnalyzer]
;compute errror from Hessian matrix
;Yes/No
withErrors = Yes

;[DerivedParameters]
;add Derived Parameters to chains

