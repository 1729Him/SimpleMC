
#TODO Updated list of models and datasets

[custom]
;directory for chains/output
chainsdir = simplemc/chains

;set model
;model options: LCDM, LCDMasslessnu, nuLCDM, NeffLCDM, noradLCDM, nuoLCDM,
;nuwLCDM, oLCDM, wCDM, waCDM, owCDM, owaCDM, JordiCDM, WeirdCDM, TLight, StepCDM,
;Spline, PolyCDM, fPolyCDM, Decay, Decay01, Decay05, EarlyDE, EarlyDE_rd_DE, SlowRDE, sline
;more options located in the RunBase.py
model = LCDM

;prefact options : [pre, phy]
prefact = phy

;varys8 True otherwise s8=0.8
varys8  = False

;set datasets used. Ex: UnionSN+BBAO+Planck
;data options: HD, BBAO, GBAO, GBAO_no6dF, CMASS, LBAO, LaBAO,
;LxBAO, MGS, Planck, WMAP, PlRd, WRd, PlDa, PlRdx10, CMBW, SN, SNx10, UnionSN,
;RiessH0, 6dFGS, dline
datasets = HD


;sampler can be {mcmc, nested, emcee}
;or analyzers {maxlike, genetic}
;
;mcmc -> metropolis-hastings
;nested
    ;engine can be {nestle, dynesty}
    ;nestedType can be
        ;none -> Prior mass without bounds
        ;single -> Ellipsoidal nested sampling
        ;multi -> multinest
        ;balls ->  balls centered on each live point
        ;cube -> cubes centered on each live point
;emcee
;maxlike -> Maximum Likelihood Analyzer
;genetic
analyzername = maxlike

;add derived parameters (True/False) ,
;i.e. Omega_Lambda, H0, Age of the Universe
addDerived = False


[mcmc]
;Nsamples
nsamp   = 50000

;Burn-in
skip    = 100

;temperature at which to sample
temp    = 2

; Gelman-Rubin for convergence
GRstop  = 0.01

;if single cpu, otherwise use mpi -np #
chainno = 2

;use mcevidence to compute Bayesinas evidene after posteriors are produed
evidence = False

[nested]
;engine can be nestle or dynesty
engine = dynesty

;dynamic option is only for dynesty engine
;dynamic and neuralNetwork can be False/True
dynamic = False
neuralNetwork = False

;type: for dynesty -> {'single','multi', 'balls', 'cubes'}
;type for nestle -> {'single', 'multi'}
nestedType = multi 

;it is recommended around nlivepoints=50*ndim, recommended 1024
nlivepoints = 50


;recommended 0.05
accuracy = 0.5

;u for flat(uniform) or g for gaussian prior
priortype = u

;when using gaussian prior
sigma = 2


;nproc = mp.cpu_count()//2 by default, you can set with another positive integer
nproc = 2 

;Produce output on the fly
showfiles = True

;if neuralNetwork = yes, then you can set:

[neural]
split = 0.8

;numNeurons of hidden layers
numNeurons = 50

[emcee]
walkers = 20
nsamp = 15000

burnin = x
nproc = 4


[maxlike]
;compute errror from Hessian matrix
;False/True
withErrors = True

#plot Fisher matrix
showplot = True

plot_par1 = h
plot_par2 = Om

;[DerivedParameters]
;add Derived Parameters to chains
;genetic parameters

[genetic]
n_individuals = 10
n_generations = 500
;selection_method = {tournament, roulette, rank}
selection_method = tournament
;mutation probability
mut_prob = 0.4
